# -*- coding: utf-8 -*-
"""Data_Engg_5_12/8/24.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HmXsnosFbgoERoP7aVALkRL9Hgy24uke

# **Cp-Price Prediction** **::**
"""

# Import libraries
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import seaborn as sns
import missingno as msno
import datetime as dt

url = 'https://raw.githubusercontent.com/PoornimasreJegannathan/Poorni/main/Copper_In_Set.csv'
copin=pd.read_csv(url)
# copin.head()

copin.info()

copin.dropna(subset='id', inplace=True)           # 2 null
copin.dropna(subset='item_date', inplace=True)    # 1 null
copin.dropna(subset='customer', inplace=True)     # 1 null
copin.dropna(subset='country', inplace=True)
copin.dropna(subset='status', inplace=True)       # 2 null
copin.dropna(subset='application', inplace=True)
copin.dropna(subset='thickness', inplace=True)    # 1 null
copin.dropna(subset='delivery date', inplace=True) #  1 null
copin.dropna(subset='selling_price', inplace=True) # 1 null

copin.info()

# copin['id'] = copin['id'].astype(str)
copin['quantity tons'] = pd.to_numeric( copin['quantity tons'], errors='coerce')

# copin['material_ref']=copin['material_ref'].astype(str)
# copin['material_ref']=copin['material_ref'].interpolate(method='linear',Reference=copin['product_ref'])
# copin=copin[~copin['material_ref'].str.startswith('000000')]

copin.info()

copin['item_date']=pd.to_datetime(copin['item_date'].astype(int).astype(str), format='%Y%m%d',errors='coerce')

copin= copin.rename(columns={'item type':'item_type','delivery date':'delivery_date'})

copin['delivery_date']=pd.to_datetime(copin['delivery_date'].astype(int).astype(str), format='%Y%m%d',errors='coerce')

copin.dropna(subset='quantity tons', inplace=True) # 1 null

a=copin[copin['selling_price']<=0]

len(a)

len(copin['material_ref'].unique())

copin.drop(a.index,inplace=True)

len(copin['material_ref'].unique())

c=copin['selling_price'].nlargest(4)

copin.drop(c.index,inplace=True)

len(copin['material_ref'].unique())

d=copin[copin['selling_price']<=1]

d

copin.drop(d.index,inplace=True)

summary=copin['selling_price'].describe()

sns.displot(copin['selling_price'], bins = 100)
plt.show()

"""IQR"""

#Finding the IQR
# percentile25 = copin['selling_price'].quantile(0.25)
# percentile75 = copin['selling_price'].quantile(0.75)
# iqr=percentile75 - percentile25
# print(iqr)
# print(percentile25)
# print(percentile75)

# upper_limit = percentile75 + 1.5 * iqr
# lower_limit = percentile25 - 1.5 * iqr
# print(upper_limit)
# print(lower_limit)

# Data with Outliers- iqr based
# dfnq=copin[(copin['selling_price'] > 1379.0) | (copin['selling_price'] < 243.0)]
# dfnq.shape

# Data without Outliers or Clean Data = Process called Trimming. (cutting the Outliers)-
# dfnq=copin[(copin['selling_price'] < 1379.0) & (copin['selling_price'] > 243.0)]
# dfnq.shape

# Capping using IQR Base:

# upper_limit=1379.0
# lower_limit=243.0

# copin['selling_price'] = np.where(copin['selling_price']>upper_limit,upper_limit,copin['selling_price'])

# copin['selling_price'] = np.where(copin['selling_price']<lower_limit,lower_limit,copin['selling_price'])


# print((copin['selling_price']).max())

# sns.displot(copin['selling_price'], bins = 100)
# plt.show()

copin.info()

copin.dropna(subset='delivery_date', inplace=True) #  1 null
copin.dropna(subset='item_date', inplace=True) #  1 null

len(copin['material_ref'].unique())

copin['matref_wd_th'] = copin['material_ref'].astype(str) +"_"+ copin['width'].astype(str) +"_"+copin['thickness'].astype(str)

copin.info()

"""STD based"""

#Finding the Boundary Values
print("Highest allowed",copin['selling_price'].mean() + 3*copin['selling_price'].std())
print("Lowest allowed",copin['selling_price'].mean() - 3*copin['selling_price'].std())

## Finding the Outliers
dfns=copin[(copin['selling_price'] > 1506.1026) | (copin['selling_price'] < 127.4650)]
dfns.shape

# #Data without Outliers or Clean Data = Process called Trimming. (cutting the Outliers)
dfns1=copin[(copin['selling_price'] < 1506.10786) & (copin['selling_price'] > 127.46711)]
dfns1.shape

copin=copin.drop(dfns.index)

copin.info()

sns.displot(copin['selling_price'], bins = 100)
plt.show()

len(copin['material_ref'].unique())  # losing unique materials after eliminating the outliers

copin.dropna(subset='material_ref', inplace=True)

copin.isnull().sum()

"""TO  be conti..."""

len(copin['product_ref'].unique())

len(copin['product_ref'].value_counts())

len(copin['application'].value_counts())

q1=copin[copin['quantity tons']<=0]

q1

copin.drop(q1.index,inplace=True)

copin.info()

len(copin['material_ref'].unique())

"""Pre-Process-1"""

copin['material_ref']=copin['material_ref'].astype(str)
copin=copin[~copin['material_ref'].str.startswith('000000')]

copin.info()

from sklearn import preprocessing
le = preprocessing.LabelEncoder()
col1 = ['material_ref','matref_wd_th']
copin[col1] = copin[col1].apply(le.fit_transform)

copin['material_ref'] = pd.to_numeric( copin['material_ref'], errors='coerce')

copin['matref_wd_th'] = pd.to_numeric( copin['matref_wd_th'], errors='coerce')

copin['material_ref']=copin['material_ref'].interpolate(method='linear',Reference=copin['product_ref'])

copin['matref_wd_th']=copin['matref_wd_th'].interpolate(method='linear',Reference=copin['product_ref'])

copin.info()

copin.head()

"""Preprocess-2"""

copin['id']=copin['id'].astype(str)
copin['id'] = pd.to_numeric( copin['id'], errors='coerce')

copin.info()

copin.head()



from sklearn import preprocessing
le = preprocessing.LabelEncoder()
cols = ['status','application','customer','country','item_type',]
copin[cols] = copin[cols].apply(le.fit_transform)

from sklearn import preprocessing
le = preprocessing.LabelEncoder()
cols2 = ['id']
copin[cols2] = copin[cols2].apply(le.fit_transform)

copin.head()

copin.corr().selling_price.sort_values()

copin.info()

copin['date_diff'] = (pd.to_datetime(copin['delivery_date']) - (pd.to_datetime(copin['item_date']))).dt.days.abs()

"""Linear"""

# Xsecd = copin[['id','quantity tons','customer','date_diff','country','status',	'item_type','application','product_ref','material_ref',]].values
# ysecd = copin['selling_price'].values

# X2f = copin[['date_diff','status','item_type','application',]].values
# y2f= copin['selling_price'].values

# from sklearn.model_selection import train_test_split
# X_train,X_test,y_train,y_test = train_test_split(Xsecd,ysecd,test_size=0.3,random_state=10)
# from sklearn.preprocessing import StandardScaler
# from sklearn.pipeline import Pipeline
# pipeline = Pipeline([
#    ('std_scalar', StandardScaler())
# ])
# X_train = pipeline.fit_transform(X_train)
# X_test = pipeline.fit_transform(X_test)
# X_test

# from sklearn.model_selection import train_test_split
# X_train,X_test,y_train,y_test = train_test_split(X2f,y2f,test_size=0.3,random_state=10)
# from sklearn.preprocessing import StandardScaler
# from sklearn.pipeline import Pipeline
# pipeline = Pipeline([
#    ('std_scalar', StandardScaler())
# ])
# X_train = pipeline.fit_transform(X_train)
# X_test = pipeline.fit_transform(X_test)
# X_test

# from sklearn.linear_model import LinearRegression
# model = LinearRegression()
# model.fit(X_train,y_train)

# y_predict= model.predict(X_test)

# y_predict

# from sklearn import metrics
# import numpy as np
# print('Mean Absolute Error:', metrics.mean_absolute_error(y_test, y_predict))
# print('Mean Squared Error:', metrics.mean_squared_error(y_test, y_predict))
# print('Root Mean Squared Error:', np.sqrt(metrics.mean_squared_error(y_test, y_predict)))

# from sklearn.metrics import r2_score
# r2 = r2_score(y_test, y_predict)
# print('R² score:', r2)

# Ridge Regression
# from sklearn import metrics
# from sklearn.linear_model import LinearRegression, Ridge, Lasso
# from sklearn.metrics import mean_squared_error, r2_score
# ridge_model = Ridge(alpha=1.0)
# ridge_model.fit(X_train, y_train)
# ridge_y_pred = ridge_model.predict(X_test)
# print("\nRidge Regression:")
# print("Intercept:", ridge_model.intercept_)
# print("Coefficient:", ridge_model.coef_[0])
# print("Mean Squared Error:", mean_squared_error(y_test, ridge_y_pred))
# print("R² score:", r2_score(y_test, ridge_y_pred))

"""Trial"""

copin['id'].unique()

copin['status'].unique()

copin['date_diff'].unique()

#'item_type','application','product_ref'

len(copin['material_ref'].unique())

copin['item_type'].unique()

copin['application'].unique()

len(copin['product_ref'].unique())

f2=model.predict([[12,5,4,20]])

f2

